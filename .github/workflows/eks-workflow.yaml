name: Deploy Workload in EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      AWS_ACCOUNT_ID:
        description: 'AWS account id'
        required: true
        default: '992382474575'
      REGION:
        description: 'AWS Region'
        required: true
        default: 'us-east-2'

env:
  GO_VERSION: 1.23.3

defaults:
  run:
    shell: bash

permissions:
  id-token: write   # Isso é necessário para solicitar o JWT
  contents: read    # Isso é necessário para ações/checkout    

jobs:
  setup-environment:
    uses: ./.github/workflows/setup-environment.yaml
    with:
      AWS_ACCOUNT_ID: ${{ github.event.inputs.AWS_ACCOUNT_ID }}
      REGION: ${{ github.event.inputs.REGION }}

  build:
    runs-on: ubuntu-latest
    needs: [ setup-environment ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup go env
      uses: actions/setup-go@v5.0.2
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod tidy

    - name: Build image
      env:
        REPO_NAME: ${{ needs.setup-environment.outputs.REPO_NAME }}
        MAIN_GO_FILE: ${{ needs.setup-environment.outputs.MAIN_GO_FILE }}
      run: go build -v -o $REPO_NAME $MAIN_GO_FILE

  package-and-publish:
    runs-on: ubuntu-latest
    needs: [ setup-environment, build ]
    permissions:
      id-token: write
      contents: read
    outputs:
        REGISTRY: ${{ steps.set-registry-output.outputs.REGISTRY }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials - OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ needs.setup-environment.outputs.AWS_REGION }}

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set REGISTRY output
        id: set-registry-output
        run: echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ needs.setup-environment.outputs.REPO_NAME }}
          REGION: ${{ needs.setup-environment.outputs.AWS_REGION }}
          IMAGE_TAG: ${{ needs.setup-environment.outputs.IMAGE_TAG }}
        run: | # Check if repository already exists.
          aws ecr describe-repositories --repository-names ${REPOSITORY} || aws ecr create-repository --repository-name ${REPOSITORY} --region ${REGION}
          docker build  --build-arg GITHUB_TOKEN=${{ secrets.GH_PIPELINE_TOKEN_ACTIONS }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . 
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  infra-as-code:
    runs-on: ubuntu-latest
    needs: [ setup-environment, build, package-and-publish ]
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials - OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ needs.setup-environment.outputs.AWS_REGION }}

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Execute Cloudformation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        env:
          REPO_NAME: ${{ needs.setup-environment.outputs.REPO_NAME }}
          ENVIRONMENT: ${{ needs.setup-environment.outputs.ENVIRONMENT }}
          TEMPLATE_PATH: ${{ needs.setup-environment.outputs.CLOUDFORMATION_TEMPLATE_PATH }}
          TEMPLATE_PARAMETERS_PATH: ${{ needs.setup-environment.outputs.CLOUDFORMATION_TEMPLATE_PARAMETERS_PATH }}
        with:
          name: ${{ env.REPO_NAME }}-iaac-stack
          template: ${{ env.TEMPLATE_PATH }}
          parameter-overrides: ${{ env.TEMPLATE_PARAMETERS_PATH }}
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [ setup-environment, build, package-and-publish, infra-as-code ]
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/main' 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
                 
      - name: Configure AWS credentials - OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ needs.setup-environment.outputs.AWS_REGION }}

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Update kubernetes manifest files
        env:
          AWS_ACCOUNT_ID: ${{ needs.setup-environment.outputs.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ needs.setup-environment.outputs.AWS_REGION }}
          REGISTRY: ${{ needs.package-and-publish.outputs.REGISTRY }}
          REPO_NAME: ${{ needs.setup-environment.outputs.REPO_NAME }}
          CLUSTER_NAMESPACE: ${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }}
          ENVIRONMENT: ${{ needs.setup-environment.outputs.ENVIRONMENT }}
          IMAGE_TAG: ${{ needs.setup-environment.outputs.IMAGE_TAG }}
          KUBERNETES_MANIFEST_PATH: ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}
        run: |
          # Instalar gettext se nao estiver disponivel
          if ! command -v envsubst &> /dev/null; then
            sudo apt-get install -y gettext
          fi

          # Substituir variaveis em todos os arquivos YAML no diretorio de manifestos
          for file in $KUBERNETES_MANIFEST_PATH/*.yaml; do
            envsubst < "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
          done

          # Show all contect.
          cat $KUBERNETES_MANIFEST_PATH/configmap.yaml         

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ needs.setup-environment.outputs.CLUSTER_NAME }} --region ${{ needs.setup-environment.outputs.AWS_REGION }}

      - name: Check aws identity
        run: aws sts get-caller-identity

      - name: Deployment k8 manifests
        run: |
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/configmap.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/service-account.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/deployment.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/keda.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/keda-auth.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/secret-msk.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/external-secret.yaml
          kubectl apply --kubeconfig /home/runner/.kube/config --validate=false --validate=false --namespace=${{ needs.setup-environment.outputs.CLUSTER_NAMESPACE }} -f ${{ needs.setup-environment.outputs.KUBERNETES_MANIFEST_PATH }}/secret-store-service-account.yaml